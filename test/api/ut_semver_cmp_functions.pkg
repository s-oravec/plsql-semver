create or replace package ut_semver_cmp_fns as

    description constant pete_types.typ_description := 'semver';

    procedure comparison(d varchar2 := 'version1 should be greater than version2');
    procedure equivalence(d varchar2 := 'version1 should be equivalent to version2');
    procedure range_tests_include(d varchar2 := 'range tests - version should be included by range');
    procedure negative_range_tests(d varchar2 := 'version should not be included by range');

end;
/
create or replace package body ut_semver_cmp_fns as

    d debug := new debug('semver:test:semver_cmp_fns');

    type version_pair_sample is record(
        v1    varchar2(255),
        v2    varchar2(255),
        loose boolean);
    type version_pair_samples is table of version_pair_sample;

    type range_version_sample is record(
        range   varchar2(255),
        version varchar2(255),
        loose   boolean);
    type range_version_samples is table of range_version_sample;

    ----------------------------------------------------------------------------  
    function vps
    (
        v1    varchar2,
        v2    varchar2,
        loose boolean default false
    ) return version_pair_sample is
        l_result version_pair_sample;
    begin
        l_result.v1    := v1;
        l_result.v2    := v2;
        l_result.loose := loose;
        return l_result;
    end;

    ----------------------------------------------------------------------------
    function rvs
    (
        range   varchar2,
        version varchar2,
        loose   boolean default false
    ) return range_version_sample is
        l_result range_version_sample;
    begin
        l_result.range   := range;
        l_result.version := version;
        l_result.loose   := loose;
        return l_result;
    end;

    ----------------------------------------------------------------------------
    procedure comparison(d varchar2) is
        l_failed boolean := false;
        -- NoFormat Start
        samples version_pair_samples := version_pair_samples(
            vps('0.0.0', '0.0.0-foo'),
            vps('0.0.1', '0.0.0'),
            vps('1.0.0', '0.9.9'),
            vps('0.10.0', '0.9.0'),
            vps('0.99.0', '0.10.0'),
            vps('2.0.0', '1.2.3'),            
            vps('1.2.3', '1.2.3-asdf'),
            vps('1.2.3', '1.2.3-4'),
            vps('1.2.3', '1.2.3-4-foo'),
            vps('1.2.3-5-foo', '1.2.3-5'),
            vps('1.2.3-5', '1.2.3-4'),
            vps('1.2.3-5-foo', '1.2.3-5-Foo'),
            vps('3.0.0', '2.7.2+asdf'),
            vps('1.2.3-a.10', '1.2.3-a.5'),
            vps('1.2.3-a.b', '1.2.3-a.5'),
            vps('1.2.3-a.b', '1.2.3-a'),
            vps('1.2.3-a.b.c.10.d.5', '1.2.3-a.b.c.5.d.100'),
            vps('1.2.3-r2', '1.2.3-r100'),
            vps('1.2.3-r100', '1.2.3-R2')
        );
        -- NoFormat End
    begin
        pete.set_method_description(d);
        for i in 1 .. samples.count loop
            begin
                -- NoFormat Start
                pete_assert.this(semver.gt(samples(i).v1, samples(i).v2), 'gt("' || samples(i).v1 || '", "' || samples(i).v2 || '")');
                pete_assert.this(semver.lt(samples(i).v2, samples(i).v1), 'lt("' || samples(i).v2 || '", "' || samples(i).v1 || '")');
                pete_assert.this(not semver.gt(samples(i).v2, samples(i).v1), 'not gt("' || samples(i).v2 || '", "' || samples(i).v1 || '")');
                pete_assert.this(not semver.lt(samples(i).v1, samples(i).v2), 'not lt("' || samples(i).v1 || '", "' || samples(i).v2 || '")');
                pete_assert.this(semver.eq(samples(i).v1, samples(i).v1), 'eq("' || samples(i).v1 || '", "' || samples(i).v1 || '")');
                pete_assert.this(semver.eq(samples(i).v2, samples(i).v2), 'eq("' || samples(i).v2 || '", "' || samples(i).v2 || '")');
                pete_assert.this(semver.neq(samples(i).v1, samples(i).v2), 'neq("' || samples(i).v1 || '", "' || samples(i).v2 || '")');
                pete_assert.this(semver.cmp(samples(i).v2, '=', samples(i).v2), 'cmp("' || samples(i).v2 || '" = "' || samples(i).v2 || '")');
                pete_assert.this(semver.cmp(samples(i).v1, '>=', samples(i).v2), 'cmp("' || samples(i).v1 || '" >= "' || samples(i).v2 || '")');
                pete_assert.this(semver.cmp(samples(i).v2, '<=', samples(i).v1), 'cmp("' || samples(i).v2 || '" <= "' || samples(i).v1 || '")');
                pete_assert.this(semver.cmp(samples(i).v1, '!=', samples(i).v2), 'cmp("' || samples(i).v1 || '" != "' || samples(i).v2 || '")');
                -- NoFormat End
            exception
                when others then
                    l_failed := true;
            end;
        end loop;
        if l_failed then
            pete_assert.fail('failed');
        end if;
    end;

    ----------------------------------------------------------------------------
    procedure equivalence(d varchar2) is
        l_failed boolean := false;
        -- NoFormat Start
        samples version_pair_samples := version_pair_samples(
            -- need loose mathing implementation vps('1.2.3', 'v1.2.3', true),
            -- need loose mathing implementation vps('1.2.3', '=1.2.3', true),
            -- need loose mathing implementation vps('1.2.3', 'v 1.2.3', true),
            -- need loose mathing implementation vps('1.2.3', '= 1.2.3', true),
            -- need loose mathing implementation vps('1.2.3', ' v1.2.3', true),
            -- need loose mathing implementation vps('1.2.3', ' =1.2.3', true),
            -- need loose mathing implementation vps('1.2.3', ' v 1.2.3', true),
            -- need loose mathing implementation vps('1.2.3', ' = 1.2.3', true),
            -- need loose mathing implementation vps('1.2.3-0', 'v1.2.3-0', true),
            -- need loose mathing implementation vps('1.2.3-0', '=1.2.3-0', true),
            -- need loose mathing implementation vps('1.2.3-0', 'v 1.2.3-0', true),
            -- need loose mathing implementation vps('1.2.3-0', '= 1.2.3-0', true),
            -- need loose mathing implementation vps('1.2.3-0', ' v1.2.3-0', true),
            -- need loose mathing implementation vps('1.2.3-0', ' =1.2.3-0', true),
            -- need loose mathing implementation vps('1.2.3-0', ' v 1.2.3-0', true),
            -- need loose mathing implementation vps('1.2.3-0', ' = 1.2.3-0', true),
            -- need loose mathing implementation vps('1.2.3-1', 'v1.2.3-1', true),
            -- need loose mathing implementation vps('1.2.3-1', '=1.2.3-1', true),
            -- need loose mathing implementation vps('1.2.3-1', 'v 1.2.3-1', true),
            -- need loose mathing implementation vps('1.2.3-1', '= 1.2.3-1', true),
            -- need loose mathing implementation vps('1.2.3-1', ' v1.2.3-1', true),
            -- need loose mathing implementation vps('1.2.3-1', ' =1.2.3-1', true),
            -- need loose mathing implementation vps('1.2.3-1', ' v 1.2.3-1', true),
            -- need loose mathing implementation vps('1.2.3-1', ' = 1.2.3-1', true),
            -- need loose mathing implementation vps('1.2.3-beta', 'v1.2.3-beta', true),
            -- need loose mathing implementation vps('1.2.3-beta', '=1.2.3-beta', true),
            -- need loose mathing implementation vps('1.2.3-beta', 'v 1.2.3-beta', true),
            -- need loose mathing implementation vps('1.2.3-beta', '= 1.2.3-beta', true),
            -- need loose mathing implementation vps('1.2.3-beta', ' v1.2.3-beta', true),
            -- need loose mathing implementation vps('1.2.3-beta', ' =1.2.3-beta', true),
            -- need loose mathing implementation vps('1.2.3-beta', ' v 1.2.3-beta', true),
            -- need loose mathing implementation vps('1.2.3-beta', ' = 1.2.3-beta', true),
            -- need loose mathing implementation vps('1.2.3-beta+build', ' = 1.2.3-beta+otherbuild', true),
            -- need loose mathing implementation vps('1.2.3+build', ' = 1.2.3+otherbuild', true),
            vps('1.2.3-beta+build', '1.2.3-beta+otherbuild'),
            vps('1.2.3+build', '1.2.3+otherbuild'),
            vps('  v1.2.3+build', '1.2.3+otherbuild')
        );
        -- NoFormat End
    begin
        pete.set_method_description(d);
        for i in 1 .. samples.count loop
            begin
                -- NoFormat Start
                pete_assert.this(semver.eq(samples(i).v1, samples(i).v2),'eq("' || samples(i).v1 ||'", "' || samples(i).v2 ||'")');
                pete_assert.this(not semver.neq(samples(i).v1, samples(i).v2),'not neq("' || samples(i).v1 ||'", "' || samples(i).v2 ||'")');
                pete_assert.this(semver.cmp(samples(i).v1, '==', samples(i).v2), 'cmp("' || samples(i).v1 || '"=="' || samples(i).v2 || '")');
                pete_assert.this(not semver.cmp(samples(i).v1, '!=', samples(i).v2), 'not cmp("' || samples(i).v1 || '"!="' || samples(i).v2 || '")');
                pete_assert.this(not semver.cmp(samples(i).v1, '===', samples(i).v2), '"not cmp("' || samples(i).v1 || '"==="' || samples(i).v2 || '")');
                pete_assert.this(semver.cmp(samples(i).v1, '!==', samples(i).v2), '"cmp("' || samples(i).v1 || '"!=="' || samples(i).v2 || '")');
                pete_assert.this(not semver.gt(samples(i).v1, samples(i).v2),'not gt("' || samples(i).v1 ||'", "' || samples(i).v2 ||'")');
                pete_assert.this(semver.gte(samples(i).v1, samples(i).v2),'gte("' || samples(i).v1 ||'", "' || samples(i).v2 ||'")');
                pete_assert.this(not semver.lt(samples(i).v1, samples(i).v2),'not lt("' || samples(i).v1 ||'", "' || samples(i).v2 ||'")');
                pete_assert.this(semver.lte(samples(i).v1, samples(i).v2),'lte("' || samples(i).v1 ||'", "' || samples(i).v2 ||'")');
                -- NoFormat End
            exception
                when others then
                    l_failed := true;
            end;
        end loop;
        if l_failed then
            pete_assert.fail('failed');
        end if;
    end;

    ----------------------------------------------------------------------------
    procedure range_tests_include(d varchar2) is
        l_failed boolean := false;
        -- NoFormat Start
        samples range_version_samples := range_version_samples(
            rvs('1.0.0 - 2.0.0', '1.2.3'),
            rvs('^1.2.3+build', '1.2.3'),
            rvs('^1.2.3+build', '1.3.0'),
            rvs('1.2.3-pre+asdf - 2.4.3-pre+asdf', '1.2.3'),
            -- requires loose implementation rvs('1.2.3pre+asdf - 2.4.3-pre+asdf', '1.2.3', true),
            -- requires loose implementation rvs('1.2.3-pre+asdf - 2.4.3pre+asdf', '1.2.3', true),
            -- requires loose implementation rvs('1.2.3pre+asdf - 2.4.3pre+asdf', '1.2.3', true),
            rvs('1.2.3-pre+asdf - 2.4.3-pre+asdf', '1.2.3-pre.2'),
            rvs('1.2.3-pre+asdf - 2.4.3-pre+asdf', '2.4.3-alpha'),
            rvs('1.2.3+asdf - 2.4.3+asdf', '1.2.3'),
            rvs('1.0.0', '1.0.0'),
            rvs('>=*', '0.2.4'),
            rvs('', '1.0.0'),
            rvs('*', '1.2.3'),
            -- requires loose implementation rvs('*', 'v1.2.3', true),
            rvs('>=1.0.0', '1.0.0'),
            rvs('>=1.0.0', '1.0.1'),
            rvs('>=1.0.0', '1.1.0'),
            rvs('>1.0.0', '1.0.1'),
            rvs('>1.0.0', '1.1.0'),
            rvs('<=2.0.0', '2.0.0'),
            rvs('<=2.0.0', '1.9999.9999'),
            rvs('<=2.0.0', '0.2.9'),
            rvs('<2.0.0', '1.9999.9999'),
            rvs('<2.0.0', '0.2.9'),
            rvs('>= 1.0.0', '1.0.0'),
            rvs('>=  1.0.0', '1.0.1'),
            rvs('>=   1.0.0', '1.1.0'),
            rvs('> 1.0.0', '1.0.1'),
            rvs('>  1.0.0', '1.1.0'),
            rvs('<=   2.0.0', '2.0.0'),
            rvs('<= 2.0.0', '1.9999.9999'),
            rvs('<=  2.0.0', '0.2.9'),
            rvs('<    2.0.0', '1.9999.9999'),
            rvs('<\t2.0.0', '0.2.9'),
            -- requires loose implementation rvs('>=0.1.97', 'v0.1.97', true),
            rvs('>=0.1.97', '0.1.97'),
            rvs('0.1.20 || 1.2.4', '1.2.4'),
            rvs('>=0.2.3 || <0.0.1', '0.0.0'),
            rvs('>=0.2.3 || <0.0.1', '0.2.3'),
            rvs('>=0.2.3 || <0.0.1', '0.2.4'),
            rvs('||', '1.3.4'),
            rvs('2.x.x', '2.1.3'),
            rvs('1.2.x', '1.2.3'),
            rvs('1.2.x || 2.x', '2.1.3'),
            rvs('1.2.x || 2.x', '1.2.3'),
            rvs('x', '1.2.3'),
            rvs('2.*.*', '2.1.3'),
            rvs('1.2.*', '1.2.3'),
            rvs('1.2.* || 2.*', '2.1.3'),
            rvs('1.2.* || 2.*', '1.2.3'),
            rvs('*', '1.2.3'),
            rvs('2', '2.1.2'),
            rvs('2.3', '2.3.1'),
            rvs('~x', '0.0.9'), -- >=2.4.0 <2.5.0
            rvs('~2', '2.0.9'), -- >=2.4.0 <2.5.0
            rvs('~2.4', '2.4.0'), -- >=2.4.0 <2.5.0
            rvs('~2.4', '2.4.5'),
            rvs('~>3.2.1', '3.2.2'), -- >=3.2.1 <3.3.0,
            rvs('~1', '1.2.3'), -- >=1.0.0 <2.0.0
            rvs('~>1', '1.2.3'),
            rvs('~> 1', '1.2.3'),
            rvs('~1.0', '1.0.2'), -- >=1.0.0 <1.1.0,
            rvs('~ 1.0', '1.0.2'),
            rvs('~ 1.0.3', '1.0.12'),
            rvs('>=1', '1.0.0'),
            rvs('>= 1', '1.0.0'),
            rvs('<1.2', '1.1.1'),
            rvs('< 1.2', '1.1.1'),
            rvs('~v0.5.4-pre', '0.5.5'),
            rvs('~v0.5.4-pre', '0.5.4'),
            rvs('=0.7.x', '0.7.2'),
            rvs('<=0.7.x', '0.7.2'),
            rvs('>=0.7.x', '0.7.2'),
            rvs('<=0.7.x', '0.6.2'),
            rvs('~1.2.1 >=1.2.3', '1.2.3'),
            rvs('~1.2.1 =1.2.3', '1.2.3'),
            rvs('~1.2.1 1.2.3', '1.2.3'),
            rvs('~1.2.1 >=1.2.3 1.2.3', '1.2.3'),
            rvs('~1.2.1 1.2.3 >=1.2.3', '1.2.3'),
            rvs('~1.2.1 1.2.3', '1.2.3'),
            rvs('>=1.2.1 1.2.3', '1.2.3'),
            rvs('1.2.3 >=1.2.1', '1.2.3'),
            rvs('>=1.2.3 >=1.2.1', '1.2.3'),
            rvs('>=1.2.1 >=1.2.3', '1.2.3'),
            rvs('>=1.2', '1.2.8'),
            rvs('^1.2.3', '1.8.1'),
            rvs('^0.1.2', '0.1.2'),
            rvs('^0.1', '0.1.2'),
            rvs('^0.0.1', '0.0.1'),
            rvs('^1.2', '1.4.2'),
            rvs('^1.2 ^1', '1.4.2'),
            rvs('^1.2.3-alpha', '1.2.3-pre'),
            rvs('^1.2.0-alpha', '1.2.0-pre'),
            rvs('^0.0.1-alpha', '0.0.1-beta'),
            rvs('^0.1.1-alpha', '0.1.1-beta'),
            rvs('^x', '1.2.3'),
            rvs('x - 1.0.0', '0.9.7'),
            rvs('x - 1.x', '0.9.7'),
            rvs('1.0.0 - x', '1.9.7'),
            rvs('1.x - x', '1.9.7'),
            rvs('<=7.x', '7.9.9')
        );
        -- NoFormat End
    begin
        pete.set_method_description(d);
        for i in 1 .. samples.count loop
            begin
                 -- NoFormat Start
                  pete_assert.this(
                      semver.satisfies(samples(i).version, samples(i).range),
                      'range "' || samples(i).range ||'" satisfied by "' || samples(i).version ||'"'
                  );
                -- NoFormat End
            exception
                when others then
                    l_failed := true;
                    dbms_output.put_line('range "' || samples(i).range ||'" satisfied by "' || samples(i).version ||'"' || chr(10) || 'sqlerrm: ' || sqlerrm);
            end;
        end loop;
        if l_failed then
            pete_assert.fail('failed');
        end if;
    end;

    ----------------------------------------------------------------------------
    procedure negative_range_tests(d varchar2) is
        l_failed boolean := false;
        -- NoFormat Start
        samples range_version_samples := range_version_samples(
            rvs('1.0.0 - 2.0.0', '2.2.3'),
            rvs('1.2.3+asdf - 2.4.3+asdf', '1.2.3-pre.2'),
            rvs('1.2.3+asdf - 2.4.3+asdf', '2.4.3-alpha'),
            rvs('^1.2.3+build', '2.0.0'),
            rvs('^1.2.3+build', '1.2.0'),
            rvs('^1.2.3', '1.2.3-pre'),
            rvs('^1.2', '1.2.0-pre'),
            rvs('>1.2', '1.3.0-beta'),
            rvs('<=1.2.3', '1.2.3-beta'),
            rvs('^1.2.3', '1.2.3-beta'),
            rvs('=0.7.x', '0.7.0-asdf'),
            rvs('>=0.7.x', '0.7.0-asdf'),
            --rvs('1', '1.0.0beta', true),
            --rvs('<1', '1.0.0beta', true),
            --rvs('< 1', '1.0.0beta', true),
            rvs('1.0.0', '1.0.1'),
            rvs('>=1.0.0', '0.0.0'),
            rvs('>=1.0.0', '0.0.1'),
            rvs('>=1.0.0', '0.1.0'),
            rvs('>1.0.0', '0.0.1'),
            rvs('>1.0.0', '0.1.0'),
            rvs('<=2.0.0', '3.0.0'),
            rvs('<=2.0.0', '2.9999.9999'),
            rvs('<=2.0.0', '2.2.9'),
            rvs('<2.0.0', '2.9999.9999'),
            rvs('<2.0.0', '2.2.9'),
            -- requires loose implementation rvs('>=0.1.97', 'v0.1.93', true),
            rvs('>=0.1.97', '0.1.93'),
            rvs('0.1.20 || 1.2.4', '1.2.3'),
            rvs('>=0.2.3 || <0.0.1', '0.0.3'),
            rvs('>=0.2.3 || <0.0.1', '0.2.2'),
            rvs('2.x.x', '1.1.3'),
            rvs('2.x.x', '3.1.3'),
            rvs('1.2.x', '1.3.3'),
            rvs('1.2.x || 2.x', '3.1.3'),
            rvs('1.2.x || 2.x', '1.1.3'),
            rvs('2.*.*', '1.1.3'),
            rvs('2.*.*', '3.1.3'),
            rvs('1.2.*', '1.3.3'),
            rvs('1.2.* || 2.*', '3.1.3'),
            rvs('1.2.* || 2.*', '1.1.3'),
            rvs('2', '1.1.2'),
            rvs('2.3', '2.4.1'),
            rvs('~2.4', '2.5.0'), -- >=2.4.0 <2.5.0
            rvs('~2.4', '2.3.9'),
            rvs('~>3.2.1', '3.3.2'), -- >=3.2.1 <3.3.0
            rvs('~>3.2.1', '3.2.0'), -- >=3.2.1 <3.3.0
            rvs('~1', '0.2.3'), -- >=1.0.0 <2.0.0
            rvs('~>1', '2.2.3'),
            rvs('~1.0', '1.1.0'), -- >=1.0.0 <1.1.0
            rvs('<1', '1.0.0'),
            rvs('>=1.2', '1.1.1'),
            -- requires loose implementation rvs('1', '2.0.0beta', true),
            rvs('~v0.5.4-beta', '0.5.4-alpha'),
            rvs('=0.7.x', '0.8.2'),
            rvs('>=0.7.x', '0.6.2'),
            rvs('<0.7.x', '0.7.2'),
            rvs('<1.2.3', '1.2.3-beta'),
            rvs('=1.2.3', '1.2.3-beta'),
            rvs('>1.2', '1.2.8'),
            rvs('^0.0.1', '0.0.2'),
            rvs('^1.2.3', '2.0.0-alpha'),
            rvs('^1.2.3', '1.2.2'),
            rvs('^1.2', '1.1.9'),
            -- requires loose implementation rvs('*', 'v1.2.3-foo', true),
            -- invalid ranges never satisfied!
            rvs('blerg', '1.2.3'),
            -- requires loose implementation rvs('git+https://user:password0123@github.com/foo', '123.0.0', true),
            rvs('^1.2.3', '2.0.0-pre'),
            rvs('^1.2.3', 'false')
        );
        -- NoFormat End
    begin
        pete.set_method_description(d);
        for i in 1 .. samples.count loop
            begin
                 -- NoFormat Start
                  pete_assert.this(
                      not semver.satisfies(samples(i).version, samples(i).range),
                      'range "' || samples(i).range ||'" not satisfied by "' || samples(i).version ||'"'
                  );
                -- NoFormat End
            exception
                when others then
                    l_failed := true;
            end;
        end loop;
        if l_failed then
            pete_assert.fail('failed');
        end if;
    end;

end;
/
